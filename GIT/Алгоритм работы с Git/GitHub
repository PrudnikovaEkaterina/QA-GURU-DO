Проверить, установлен ли гит git --version
Установить глобальные имя и пароль git config --global user.name    git config --global user.email

Чтобы переопределить имя для отдельных репозиториев (для рабочих на рабочую почту, например) 
можноиспользовать  git config --local user.name    git config --local user.email

Для инициализации репозитория необходимо в папке с проектом вызвать команду git init. 
В этот момент система создаст скрытую папку .git и будет сохранять в ней служебные файлы. 
Если ее удалить, то Git потеряет данные о репозитории и перестанет отслеживать изменения в проекте.

Важно: вызывать git init необходимо в папке с проектом.

В корне проекта создать файл .gitignore куда добавить файлы
/.idea
/.gradle
/build

потом отделғно
 git add .gitignore
 git add .
 
 Ису файлы, кром тех, что в гитигнор стали отслеживаемыми

Как добавить изменения
Для добавления изменений необходимо вызвать команду git add <название файла>. 
Если необходимо добавить не один файл, а все содержимое проекта, то следует вызвать git .
Следует использовать внимательно и осторожно, иначе можно закоммитить много лишнего.

Важно: Индекс в Git — специальная промежуточная область, хранящая в себе изменения файлов на пути от рабочей папки до репозитория.

Как удалить изменения
Если в индекс попало лишнее, то такие файлы можно удалить из индекса с помощью команды git rm --cached <название файла>. 
Весь индекс сразу можно очистить с помощью git rm --cached .

Как не забивать репозиторий мусором
Во время работы над проектом IDE, компиляторы и другие инструменты создают много служебных файлов, которые не несут в себе практической пользы для разработчика. 
Их не надо коммитить в репозиторий и чтобы в ручную не отслеживать их состояние, можно указать список этих файлов в .gitignore-файле.
Такой файл можно написать самостоятельно, а можно сгенерировать на сайте https://www.toptal.com/developers/gitignore

Для контроля статуса всех файлов проекта можно восопользоваться командой git status. 
Система выведет список файлов в индексе, неотслеживаемых файлов и удаленных из индекса.

Как зафиксировать измения в репозитории
В локальном репозитории изменения можно зафиксировать с помощью команды git commit -m "Ваше сообщение". 
После вызова все файлы из индекса попадут в локальный репозиторий. Поэтому перед вызовом git commit необходимо выполнить git add. 
Также в строчке сообщений важно указывать осмысленные сообщения о внесенных изменениях.

Для отправки изменения в удаленный репозиторий GitHub предусмотрена команда push.
Если мы делаем первый пуш, то необходимо вызвать команду в следующем виде и обязательно с ключом -u: git push -u origin <название ветки>. 
Далее просто git push origin <название ветки>.

Ветки в Git помогают вносить изменения в код и не портить основной проект. 
Главная ветка с кодом основного проекта — master (иногда main, но это не так важно, оба названия указывают на то, что эта ветка главная).
В любой момент времени от основной ветки можно создать новую с копией кода и продолжить работать в ней, а после слить с основной.
Основные команды:

Создать новую ветку — git branch <имя ветки>
Посмотреть список веток — git branch
Переключиться на ветку — git checkout <имя ветки>

Для слияния веток необходимо вызвать команду git merge <имя сливаемой ветки>.
Разберем на примере. Условно у нас есть ветка master с основным проектом. Мы начали разрабатывать новую фичу и создали для работы ветку feature. Через некоторое время мы закончили и решили, что пора добавить наши изменения в основную ветку. Для этого необходимо перейти в ту ветку, в которую мы будем включать изменения и вызвать git merge.

$ git checkout master
Switched to branch 'master'
$ git merge feature
Merge made by the 'recursive' strategy.

GitHub не позволит нам просто так внести измения и все испортить. Сперва наш код должны проверить. 
Для этого есть Pull request — механизм запросов на слияние ветки с master. После того, как мы выполнили команду merge в основной ветки и слили свою с основной, 
в GitHub-репозитории появится запрос на создание Pull request. Нажимаем на зеленую кнопку.
Далее мы увидим страницу pull request, на ней есть:

Визуализация того, какие ветки предлагается слить;
Строка сообщения;
Поле подробного комментария;
Возможность пригласить других пользователей для ревью кода.
Заполняем все поля и нажимаем на зеленую кнопку «Create pull request».

Вероятно, что когда мы отдыхали, кто-то из команды работал и активно вносил изменения в главную ветку или наши ветки. 
Все эти изменения уже есть в удаленном репозитории, но теперь надо получить их и в нашем локальном репозитории.
Для этих целей есть команда git pull.
