Задача любого языка программирования - хранить и обрабатывать данные;

Класс - описание типа данных, который будет храниться в нашей программе;

Структура данных - связанные между собой данные;

Класс - это описание структуры данных;

Наследование (inheritance) — механизм, который позволяет описать новый класс на основе существующего (родительского). При этом свойства и функциональность родительского 
класса заимствуются новым классом.

Возможность повторного использования кода — главное преимущество наследования.

Пожалуйста, запомни еще одну крайне важную вещь: в Java нет множественного наследования. Каждый класс наследуется только от одного класса.

Наследование описывает связь «является» (или по-английски «IS A»). Лев является Животным.
Такое отношение легко выразить с помощью наследования, где Animal будет родительским классом, а Lion — потомком.

Однако не все связи отношения в мире описываются таким образом. К примеру, клавиатура определенно как-то связана с компьютером, но она не является компьютером.
Руки как-то связаны с человеком, но они не являются человеком.

В этих случаях в его основе лежит другой тип отношения: не «является», а «является частью» («HAS A»). 
Рука не является человеком, но является частью человека. Клавиатура не является компьютером, но является частью компьютера.

Отношения HAS A можно описать в коде, используя механизмы композиции и агрегирования.

Разница между ними заключается в «строгости» этих связей.

Приведем простой пример:

У нас есть наш Car — машина. 
У каждой машины есть двигатель. 

Кроме того, у каждой машины есть пассажиры внутри.

В чем же принципиальная разница между полями Engine engine и Passenger [] passengers? Если у машины внутри сидит пассажир А, это не значит, что в ней не могут
находиться пассажиры B и C.

Одна машина может соответствовать нескольким пассажирам. Кроме того, если всех пассажиров высадить из машины, она продолжит спокойно функционировать.

Связь между классом Car и массивом пассажиров Passenger [] passengers менее строгая. Она называется агрегацией.

Композиция — более строгий тип связи. При использовании композиции объект не только является частью какого-то объекта, но и не может принадлежать другому объекту 
того же типа. 

Самый простой пример — двигатель автомобиля. Двигатель является частью автомобиля, но не может быть частью другого автомобиля.


Инкапсуляция - скрытие данных, чтобы с ними нельзя было работать напрямую. (модификаторы доступа)

Полиморфный код - код, который не нужно менять в случае изменения объектов, с которыми он работает; 
т.е если ОДИН код делает что-то для разных объектов, которые унаследованы от одного супер типа, но при этом сам код не нужно в зависимости от объектов - менять, 
то такой код - полиморфный;
