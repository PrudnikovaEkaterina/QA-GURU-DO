
JVM – это виртуальная машина, которая запускает Java-программы в портативном режиме. 

JVM выполняет две основные функции:
позволяет запускать Java-программы на любом устройстве или в любой операционной системе;
даёт доступ к управлению памятью программ и её оптимизации.
Для оптимальной работы приложения JVM делит память на область стека (stack) и область кучи (heap). 
Всякий раз, когда мы объявляем новые переменные, создаем объекты или вызываем новый метод, JVM выделяет память для этих операций в стеке или в куче.



Стек работает по схеме LIFO (последним вошел, первым вышел). Всякий раз, когда вызывается новый метод, содержащий примитивные значения или ссылки на объекты, 
то на вершине стека под них выделяется блок памяти. Из этого можно сделать вывод, что стек хранит значения примитивных переменных, создаваемых в методах, 
а также ссылки на объекты в куче на которые ссылается метод.
Когда метод завершает выполнение, блок памяти (frame), отведенный для его нужд, очищается, и пространство становится доступным для следующего метода. 
При этом поток выполнения программы возвращается к месту вызова этого метода с последующим переходом к следующей строке кода.

Куча
Эта область памяти используется для динамического выделения памяти для объектов и классов JRE во время выполнения. Новые объекты всегда создаются в куче, а ссылки на них хранятся в стеке.
Эти объекты имеют глобальный доступ и могут быть получены из любого места программы.

class Person {
    int id;
    String name;

    public Person(int id, String name) {
        this.id = id;
        this.name = name;
    }
}

public class PersonBuilder {
    private static Person buildPerson(int id, String name) {
        return new Person(id, name);
    }

    public static void main(String[] args) {
        int id = 23;
        String name = "John";
        Person person = null;
        person = buildPerson(id, name);
    }
}
Рассмотрим выполнение кода по шагам:
1. До начала выполнения метода main(), в стеке будет выделено пространство для хранения примитивов и ссылок этого метода:
примитивное значение id типа int будет храниться непосредственно в стеке;
ссылочная переменная name типа String будет создана в стеке, но сама строка "John" будет храниться в области, называемой String Pool (является частью Кучи);
ссылочная переменная person типа Person будет также создана в памяти стека, но будет указывать на объект, расположенный в куче;
2. Для вызова конструктора с параметрами Person (int, String) из метода main() в стеке, поверх предыдущего вызова метода main(), будет выделен блок памяти, 
который будет хранить:
this — ссылка на текущий объект;
примитивное значение id ;
ссылочную переменную name типа String, которая указывает на объект строки из пула строк;
3. В методе main дополнительно вызывается метод buildPerson для которого будет выделен блок памяти в стеке поверх предыдущего вызова.
Этот блок снова сохранит переменные способом, описанным выше.
4. Для вновь созданного объекта person типа Person все переменные будут сохранены в памяти кучи.
